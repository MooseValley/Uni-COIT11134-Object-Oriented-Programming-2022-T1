******************************************************
COIT11134 Object Oriented Programming (2022-T1)
Week: 11
Course WEB Page (Moodle):         https://moodle.cqu.edu.au/course/view.php?id=36018
Course Coordinator:               Bruce Mckenzie, email: b.mckenzie@cqu.edu.au, Ph. 03 9616 0609, Melbourne.
Rocky Teacher (Part-Time):        Mike O'Malley, m.omalley@cqu.edu.au
Mike O's GitHub for course/term:  https://github.com/MooseValley/Uni-COIT11134-Object-Oriented-Programming-2022-T1
Mike O'Malley's Java Videos:      http://tinyurl.com/MikesJavaVideos
******************************************************

ROAD MAP:
Week 01 - Revision of Java, Github review.
Week 02 - Inheritance
Week 03 - Polymorphism
Week 04 - GUI and Event Handling
Week 05 - GUI and Event Handling.  Next week: mid-term break
Week 06 - Exception Handling, and File IO
Week 07 - Interfaces and Inner Classes
Week 08 - Generic methods and classes
Week 09 - Generic classes
Week 10 - List and Algorithm
Week 11 - Stacks, Queues and Trees    <--- YOU ARE HERE !
Week 12 - Final Revision


LAST WEEK: Week 10
* Week 10 - List and Algorithm

THIS WEEK: Week 11
* Week 11 - Stacks, Queues and Trees    <--- YOU ARE HERE !



Balanced Tree - aka BTree

50, 30, 99, 3, 44, 150, 290, 5, 145

               50
             /    \
          30       99
         /  \       \
        3    44      150
         \          /  \
          5       145  290


Pre-Order Traversal
 - output value and then move nodes
50, 30, 3, 5, 44, 99, 150, 145, 290

In-Order Traversal
- if you can go left, go left, otherwise output value and go right or up
- outputs the values in ascending sorted order (if your tree is a correct BTree)
3, 5, 30, 44, 50, 99, 145, 150, 290

Post-Order Traversal
- move nodes left if poss, or else right or up and output values as you go up
5, 3, 44, 30, 50, 145, 290, 150, 99


Big-O - how efficient an algorithm is

O(n) = if you double the data, you double the time
e.g. linear search of array

O(n^2) = if you double the data, you quadruple the time



Sort:
	Bubble Sort		O(n^2)
	Insertion Sort		O(n^2)

	all easy to understand, very easy to program, and very inefficient
	OK to sue if you don't need to sort a lot of data often

	Merge Sort	O(n log n) approx
		hard to understand, hard to program, but more efficient than the above
	

	BTrees
		O(log n)	approx




|
|



Hide data in images - Stenography


16 million
RGB 0-256


Hi Mike, .....
H = ASCII 72
A = 65

10101110


7

Pixel 112, 233, 114




Fractals
	z = y + 0.5 x

EOF.


